(define (expmod base exp m)
    (cond ((= exp 0) 1)
	  ((even? exp)
	   (remainder (square (expmod base (/ exp 2) m))
		      m))
	  (else
	    (remainder (* base (expmod base (- exp 1) m))
		       m))))        

(define (fermat-test n)
    (define (try-it a)
          (= (expmod a n n) a))
      (try-it (+ 1 (random (- n 1)))))
(define (fast-prime? n times)
    (cond ((= times 0) true)
	          ((fermat-test n) (fast-prime? n (- times 1)))
		          (else false)))
(define (divides? a b)
    (= (remainder b a) 0))
(define (timed-prime-test n)
        (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
    (if (fast-prime? n 100)
            (report-prime n (- (runtime) start-time))
	    #f))
(define (report-prime n elapsed-time)
    (newline)
    (display n)
    (display " *** ")
      (display elapsed-time)
      #t)

(define (search-for-primes n c)
  (if (odd? n)
    (iter n 0 c)
    (search-for-primes (+ n 1) c)
    ))
 (define (iter n count c)
   (if (= count c)
     1
     (if (timed-prime-test n)
      (iter (+ n 1) (+ count 1) c)
      (iter (+ n 1) count c) 
      )))

;(search-for-primes 1e12 1)
(search-for-primes 100000000000000 3)
;(search-for-primes 10000000000000 3)
;(search-for-primes 100000 1000)
