(define (smallest-divisor n)
    (find-divisor n 2))
(define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n) n)
	          ((divides? test-divisor n) test-divisor)
		          (else (find-divisor n (+ test-divisor 1)))))

(define (prime? n)
    (= n (smallest-divisor n)))

(define (divides? a b)
    (= (remainder b a) 0))
(define (timed-prime-test n)
        (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
    (if (prime? n)
            (report-prime n (- (runtime) start-time))
	    #f))
(define (report-prime n elapsed-time)
    (newline)
    (display n)
    (display " *** ")
      (display elapsed-time)
      #t)

(define (search-for-primes n c)
  (if (odd? n)
    (iter n 0 c)
    (search-for-primes (+ n 1) c)
    ))
 (define (iter n count c)
   (if (= count c)
     1
     (if (timed-prime-test n)
      (iter (+ n 1) (+ count 1) c)
      (iter (+ n 1) count c) 
      )))

;(search-for-primes 10000 3)
(search-for-primes 100000000000 3)
;(search-for-primes 10000000000000 3)
;(search-for-primes 100000 1000)
